{"version":3,"sources":["iterable/operators/todomstream.ts"],"names":[],"mappings":";;;AAAA,4DAAgF;AAiBhF,SAAgB,WAAW,CACzB,OAAsF;IAEtF,OAAO,SAAS,2BAA2B,CAAC,MAAqB;QAC/D,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,KAAK,OAAO,EAAE;YACnE,OAAO,IAAA,yBAAmB,EAAC,MAAM,EAAE,OAA2C,CAAC,CAAC;SACjF;QACD,OAAO,IAAA,yBAAmB,EACxB,MAAM,EACN,OAAgE,CACjE,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAZD,kCAYC","file":"todomstream.js","sourcesContent":["import { toDOMStream as toDOMStreamOperator } from '../../iterable/todomstream';\nimport {\n  ReadableBYOBStreamOptions,\n  ReadableByteStreamOptions,\n} from '../../asynciterable/todomstream';\n\nimport { UnaryFunction } from '../../interfaces';\n\nexport function toDOMStream<T>(\n  strategy?: QueuingStrategy<T>\n): UnaryFunction<Iterable<T>, ReadableStream<T>>;\nexport function toDOMStream<T>(\n  options: ReadableBYOBStreamOptions<Uint8Array>\n): UnaryFunction<Iterable<T>, ReadableStream<Uint8Array>>;\nexport function toDOMStream<T>(\n  options: ReadableByteStreamOptions<Uint8Array>\n): UnaryFunction<Iterable<T>, ReadableStream<Uint8Array>>;\nexport function toDOMStream(\n  options?: QueuingStrategy<any> | ReadableBYOBStreamOptions | ReadableByteStreamOptions\n) {\n  return function toDOMStreamOperatorFunction(source: Iterable<any>) {\n    if (!options || !('type' in options) || options['type'] !== 'bytes') {\n      return toDOMStreamOperator(source, options as QueuingStrategy<any> | undefined);\n    }\n    return toDOMStreamOperator(\n      source,\n      options as ReadableBYOBStreamOptions | ReadableByteStreamOptions\n    );\n  };\n}\n"]}