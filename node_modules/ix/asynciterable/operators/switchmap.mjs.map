{"version":3,"sources":["asynciterable/operators/switchmap.ts"],"names":[],"mappings":"AAAA,OAAO,EAA6B,8BAA8B,EAAE,MAAM,YAAY,CAAC;AAGvF;;;;;;;;;;;;;;GAcG;AACH,MAAM,UAAU,SAAS,CACvB,QAAqD,EACrD,OAAa;IAEb,OAAO,SAAS,yBAAyB,CAAC,MAAM;QAC9C,OAAO,IAAI,8BAA8B,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAChF,CAAC,CAAC;AACJ,CAAC","file":"switchmap.js","sourcesContent":["import { FlattenConcurrentSelector, FlattenConcurrentAsyncIterable } from './_flatten';\nimport { OperatorAsyncFunction } from '../../interfaces';\n\n/**\n * Projects each element of an async-iterable sequence to an async-iterable sequence,\n * emitting values only from the most recently projected async-iterable sequence.\n *\n * @template TSource The type of the elements in the source sequence.\n * @template TResult The type of the elements in the projected inner sequences and the elements in the merged result sequence.\n * @param {((\n *     value: TSource,\n *     index: number,\n *     signal?: AbortSignal\n *   ) => AsyncIterableInput<TResult>)} selector A transform function to apply to each element.\n * @param {*} [thisArg] Option this for binding to the selector.\n * @returns {OperatorAsyncFunction<TSource, TResult>} An operator that creates an async-iterable sequence whose\n * elements are the result of invoking the one-to-many transform function on each element of the input sequence.\n */\nexport function switchMap<TSource, TResult>(\n  selector: FlattenConcurrentSelector<TSource, TResult>,\n  thisArg?: any\n): OperatorAsyncFunction<TSource, TResult> {\n  return function switchMapOperatorFunction(source) {\n    return new FlattenConcurrentAsyncIterable(source, selector, 1, true, thisArg);\n  };\n}\n"]}