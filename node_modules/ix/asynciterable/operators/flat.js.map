{"version":3,"sources":["asynciterable/operators/flat.ts"],"names":[],"mappings":";;;AAAA,uCAAoC;AAEpC,sDAAwD;AAkBxD;;;;;;GAMG;AACH,SAAgB,IAAI,CAAwB,QAAW,CAAC,CAAQ;IAC9D,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAQ,CAAC;IAC9C,OAAO,SAAS,uBAAuB,CACrC,MAAwB;QAExB,OAAO,IAAA,iBAAO,EAAC,CAAC,IAAS,EAAE,EAAE;YAC3B,IAAI,IAAA,4BAAe,EAAC,IAAI,CAAC,EAAE;gBACzB,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;aACjD;YACD,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC,MAAM,CAAoC,CAAC;IAChD,CAAC,CAAC;AACJ,CAAC;AAZD,oBAYC","file":"flat.js","sourcesContent":["import { flatMap } from './flatmap';\nimport { AsyncIterableX } from '../asynciterablex';\nimport { isAsyncIterable } from '../../util/isiterable';\n\ntype Flattened<Arr, Depth extends number> = Depth extends -1\n  ? FlattenInfinite<Arr>\n  : FlattenWithDepth<Arr, Depth>;\n\ntype FlattenInfinite<Arr> = Arr extends AsyncIterable<infer T> ? FlattenInfinite<T> : Arr;\n\ntype FlattenWithDepth<Arr, Depth extends number> = {\n  done: Arr;\n  recur: Arr extends AsyncIterable<infer T>\n    ? FlattenWithDepth<\n        T,\n        [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][Depth]\n      >\n    : Arr;\n}[Depth extends -1 ? 'done' : 'recur'];\n\n/**\n * Flattens the nested async-iterable by the given depth.\n *\n * @template T The type of elements in the source sequence.\n * @param {number} [depth=Infinity] The depth to flatten the async-iterable sequence if specified, otherwise infinite.\n * @returns {MonoTypeOperatorAsyncFunction<T>} An operator that flattens the async-iterable sequence.\n */\nexport function flat<D extends number = -1>(depth: D = -1 as any) {\n  depth = (depth < 0 ? Infinity : depth) as any;\n  return function flattenOperatorFunction<T>(\n    source: AsyncIterable<T>\n  ): AsyncIterableX<Flattened<T, D>> {\n    return flatMap((item: any) => {\n      if (isAsyncIterable(item)) {\n        return depth > 0 ? flat(depth - 1)(item) : item;\n      }\n      return [item];\n    })(source) as AsyncIterableX<Flattened<T, D>>;\n  };\n}\n"]}