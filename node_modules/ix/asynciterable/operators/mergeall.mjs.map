{"version":3,"sources":["asynciterable/operators/mergeall.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,8BAA8B,EAAE,MAAM,YAAY,CAAC;AAE5D;;;;;GAKG;AACH,MAAM,UAAU,QAAQ;IACtB,OAAO,SAAS,wBAAwB,CAAU,MAA6C;QAC7F,OAAO,IAAI,8BAA8B,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACxE,CAAC,CAAC;AACJ,CAAC","file":"mergeall.js","sourcesContent":["import { FlattenConcurrentAsyncIterable } from './_flatten';\n\n/**\n * Merges elements from all inner async-iterable sequences into a single async-iterable sequence.\n *\n * @template TSource The type of the elements in the source sequences.\n * @returns {OperatorAsyncFunction<AsyncIterable<TSource>, TSource>} The async-iterable sequence that merges the elements of the inner sequences.\n */\nexport function mergeAll() {\n  return function mergeAllOperatorFunction<TSource>(source: AsyncIterable<AsyncIterable<TSource>>) {\n    return new FlattenConcurrentAsyncIterable(source, (s) => s, 1, false);\n  };\n}\n"]}