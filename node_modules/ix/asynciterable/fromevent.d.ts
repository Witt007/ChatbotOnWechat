import { AsyncIterableX } from './asynciterablex';
declare type CommonEventHandler = (...args: any[]) => void;
export interface OnOffEventEmitter {
    on(event: string | symbol, listener: CommonEventHandler): this;
    off(event: string | symbol, listener: CommonEventHandler): this;
}
export interface NodeEventEmitter {
    addListener(event: string | symbol, listener: CommonEventHandler): this;
    removeListener(event: string | symbol, listener: CommonEventHandler): this;
}
export declare type EventListenerOptions = {
    capture?: boolean;
    passive?: boolean;
    once?: boolean;
} | boolean;
export declare type EventedTarget = EventTarget | OnOffEventEmitter | NodeEventEmitter;
export declare function fromEvent<TSource>(obj: EventedTarget, eventName: string): AsyncIterableX<TSource>;
export declare function fromEvent<TSource>(obj: EventedTarget, eventName: string, resultSelector: (...args: any[]) => TSource): AsyncIterableX<TSource>;
export declare function fromEvent<TSource>(obj: EventedTarget, eventName: string, options: EventListenerOptions): AsyncIterableX<TSource>;
export declare function fromEvent<TSource>(obj: EventedTarget, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => TSource): AsyncIterableX<TSource>;
export {};
