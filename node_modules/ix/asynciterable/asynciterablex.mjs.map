{"version":3,"sources":["asynciterable/asynciterablex.ts"],"names":[],"mappings":"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","file":"asynciterablex.js","sourcesContent":["import { OperatorAsyncFunction, UnaryFunction } from '../interfaces';\nimport { Observable } from '../observer';\nimport { bindCallback } from '../util/bindcallback';\nimport { identityAsync } from '../util/identity';\nimport {\n  isReadableNodeStream,\n  isWritableNodeStream,\n  isIterable,\n  isAsyncIterable,\n  isArrayLike,\n  isIterator,\n  isPromise,\n  isObservable,\n} from '../util/isiterable';\nimport { toLength } from '../util/tolength';\nimport { AbortError, throwIfAborted } from '../aborterror';\n\n/**\n * This class serves as the base for all operations which support [Symbol.asyncIterator].\n */\nexport abstract class AsyncIterableX<T> implements AsyncIterable<T> {\n  abstract [Symbol.asyncIterator](signal?: AbortSignal): AsyncIterator<T>;\n\n  /** @nocollapse */\n  async forEach(\n    projection: (value: T, index: number, signal?: AbortSignal) => void | Promise<void>,\n    thisArg?: any,\n    signal?: AbortSignal\n  ): Promise<void> {\n    const source = signal ? new WithAbortAsyncIterable(this, signal) : this;\n\n    let i = 0;\n    for await (const item of source) {\n      await projection.call(thisArg, item, i++, signal);\n    }\n  }\n\n  /** @nocollapse */\n  pipe<R>(...operations: UnaryFunction<AsyncIterable<T>, R>[]): R;\n  pipe<R>(...operations: OperatorAsyncFunction<T, R>[]): AsyncIterableX<R>;\n  pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean }): R;\n  pipe<R>(...args: any[]) {\n    let i = -1;\n    const n = args.length;\n    let acc: any = this;\n    while (++i < n) {\n      acc = args[i](AsyncIterableX.as(acc));\n    }\n    return acc;\n  }\n\n  /** @nocollapse */\n  static from<TSource, TResult = TSource>(\n    source: AsyncIterableInput<TSource>,\n    selector: (value: TSource, index: number) => TResult | Promise<TResult> = identityAsync,\n    thisArg?: any\n  ): AsyncIterableX<TResult> {\n    const fn = bindCallback(selector, thisArg, 2);\n    if (isIterable(source) || isAsyncIterable(source)) {\n      return new FromAsyncIterable<TSource, TResult>(source, fn);\n    }\n    if (isPromise(source)) {\n      return new FromPromiseIterable<TSource, TResult>(source, fn);\n    }\n    if (isObservable(source)) {\n      return new FromObservableAsyncIterable<TSource, TResult>(source, fn);\n    }\n    if (isArrayLike(source)) {\n      return new FromArrayIterable<TSource, TResult>(source, fn);\n    }\n    if (isIterator(source)) {\n      return new FromAsyncIterable<TSource, TResult>({ [Symbol.asyncIterator]: () => source }, fn);\n    }\n    throw new TypeError('Input type not supported');\n  }\n\n  /**\n   * Converts an existing string into an async-iterable of characters.\n   *\n   * @param {string} source The string to convert to an async-iterable.\n   * @returns {AsyncIterableX<string>} An async-iterable stream of characters from the source.\n   */\n  static as(source: string): AsyncIterableX<string>;\n  /**\n   * Converts the async iterable like input into an async-iterable.\n   *\n   * @template T The type of elements in the async-iterable like sequence.\n   * @param {AsyncIterableInput<T>} source The async-iterable like input to convert to an async-iterable.\n   * @returns {AsyncIterableX<T>} An async-iterable stream from elements in the async-iterable like sequence.\n   */\n  static as<T>(source: AsyncIterableInput<T>): AsyncIterableX<T>;\n  /**\n   * Converts the single element into an async-iterable sequence.\n   *\n   * @template T The type of the input to turn into an async-iterable sequence.\n   * @param {T} source The single element to turn into an async-iterable sequence.\n   * @returns {AsyncIterableX<T>} An async-iterable sequence which contains the single element.\n   */\n  static as<T>(source: T): AsyncIterableX<T>;\n  /**\n   * Converts the input into an async-iterable sequence.\n   *\n   * @param {*} source The source to convert to an async-iterable sequence.\n   * @returns {AsyncIterableX<*>} An async-iterable containing the input.\n   */\n  /** @nocollapse */\n  static as(source: any): AsyncIterableX<any> {\n    if (source instanceof AsyncIterableX) {\n      return source;\n    }\n    if (typeof source === 'string') {\n      return new FromArrayIterable([source], identityAsync);\n    }\n    if (isIterable(source) || isAsyncIterable(source)) {\n      return new FromAsyncIterable(source, identityAsync);\n    }\n    if (isPromise(source)) {\n      return new FromPromiseIterable(source, identityAsync);\n    }\n    if (isObservable(source)) {\n      return new FromObservableAsyncIterable(source, identityAsync);\n    }\n    if (isArrayLike(source)) {\n      return new FromArrayIterable(source, identityAsync);\n    }\n    return new FromArrayIterable([source], identityAsync);\n  }\n}\n\n(<any>AsyncIterableX.prototype)[Symbol.toStringTag] = 'AsyncIterableX';\n\nObject.defineProperty(AsyncIterableX, Symbol.hasInstance, {\n  writable: true,\n  configurable: true,\n  value(inst: any) {\n    return !!(inst && inst[Symbol.toStringTag] === 'AsyncIterableX');\n  },\n});\n\nconst ARRAY_VALUE = 'value';\nconst ARRAY_ERROR = 'error';\n\ninterface AsyncSinkItem<T> {\n  type: string;\n  value?: T;\n  error?: any;\n}\n\ninterface AsyncResolver<T> {\n  resolve: (value: T | PromiseLike<T>) => void;\n  reject: (reason?: any) => void;\n}\n\nexport class AsyncSink<TSource> implements AsyncIterableIterator<TSource> {\n  private _ended: boolean;\n  private _values: AsyncSinkItem<TSource>[];\n  private _resolvers: AsyncResolver<IteratorResult<TSource>>[];\n\n  constructor() {\n    this._ended = false;\n    this._values = [];\n    this._resolvers = [];\n  }\n\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n\n  write(value: TSource) {\n    this._push({ type: ARRAY_VALUE, value });\n  }\n\n  error(error: any) {\n    this._push({ type: ARRAY_ERROR, error });\n  }\n\n  private _push(item: AsyncSinkItem<TSource>) {\n    if (this._ended) {\n      throw new Error('AsyncSink already ended');\n    }\n\n    if (this._resolvers.length > 0) {\n      const { resolve, reject } = this._resolvers.shift()!;\n      if (item.type === ARRAY_ERROR) {\n        reject(item.error!);\n      } else {\n        resolve({ done: false, value: item.value! });\n      }\n    } else {\n      this._values.push(item);\n    }\n  }\n\n  next() {\n    if (this._values.length > 0) {\n      const { type, value, error } = this._values.shift()!;\n      if (type === ARRAY_ERROR) {\n        return Promise.reject(error);\n      } else {\n        return Promise.resolve({ done: false, value } as IteratorResult<TSource>);\n      }\n    }\n\n    if (this._ended) {\n      return Promise.resolve({ done: true } as IteratorResult<TSource>);\n    }\n\n    return new Promise<IteratorResult<TSource>>((resolve, reject) => {\n      this._resolvers.push({ resolve, reject });\n    });\n  }\n\n  end() {\n    while (this._resolvers.length > 0) {\n      this._resolvers.shift()!.resolve({ done: true } as IteratorResult<TSource>);\n    }\n    this._ended = true;\n  }\n}\n\nexport class FromArrayIterable<TSource, TResult = TSource> extends AsyncIterableX<TResult> {\n  private _source: ArrayLike<TSource>;\n  private _selector: (value: TSource, index: number) => TResult | Promise<TResult>;\n\n  constructor(\n    source: ArrayLike<TSource>,\n    selector: (value: TSource, index: number) => TResult | Promise<TResult>\n  ) {\n    super();\n    this._source = source;\n    this._selector = selector;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let i = 0;\n    const length = toLength((<ArrayLike<TSource>>this._source).length);\n    while (i < length) {\n      yield await this._selector(this._source[i], i++);\n    }\n  }\n}\n\nexport class FromAsyncIterable<TSource, TResult = TSource> extends AsyncIterableX<TResult> {\n  private _source: Iterable<TSource | PromiseLike<TSource>> | AsyncIterable<TSource>;\n  private _selector: (value: TSource, index: number) => TResult | Promise<TResult>;\n\n  constructor(\n    source: Iterable<TSource | PromiseLike<TSource>> | AsyncIterable<TSource>,\n    selector: (value: TSource, index: number) => TResult | Promise<TResult>\n  ) {\n    super();\n    this._source = source;\n    this._selector = selector;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let i = 0;\n    for await (const item of <AsyncIterable<TSource>>this._source) {\n      yield await this._selector(item, i++);\n    }\n  }\n}\n\nexport class FromPromiseIterable<TSource, TResult = TSource> extends AsyncIterableX<TResult> {\n  private _source: PromiseLike<TSource>;\n  private _selector: (value: TSource, index: number) => TResult | Promise<TResult>;\n\n  constructor(\n    source: PromiseLike<TSource>,\n    selector: (value: TSource, index: number) => TResult | Promise<TResult>\n  ) {\n    super();\n    this._source = source;\n    this._selector = selector;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    const item = await this._source;\n    yield await this._selector(item, 0);\n  }\n}\n\nexport class FromObservableAsyncIterable<TSource, TResult = TSource> extends AsyncIterableX<\n  TResult\n> {\n  private _observable: Observable<TSource>;\n  private _selector: (value: TSource, index: number) => TResult | Promise<TResult>;\n\n  constructor(\n    observable: Observable<TSource>,\n    selector: (value: TSource, index: number) => TResult | Promise<TResult>\n  ) {\n    super();\n    this._observable = observable;\n    this._selector = selector;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n\n    const sink: AsyncSink<TSource> = new AsyncSink<TSource>();\n    const subscription = this._observable.subscribe({\n      next(value: TSource) {\n        sink.write(value);\n      },\n      error(err: any) {\n        sink.error(err);\n      },\n      complete() {\n        sink.end();\n      },\n    });\n\n    function onAbort() {\n      sink.error(new AbortError());\n    }\n\n    if (signal) {\n      signal.addEventListener('abort', onAbort);\n    }\n\n    let i = 0;\n    try {\n      for (let next; !(next = await sink.next()).done; ) {\n        throwIfAborted(signal);\n        yield await this._selector(next.value!, i++);\n      }\n    } finally {\n      if (signal) {\n        signal.removeEventListener('abort', onAbort);\n      }\n\n      subscription.unsubscribe();\n    }\n  }\n}\n\nclass WithAbortAsyncIterable<TSource> implements AsyncIterable<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _signal: AbortSignal;\n\n  constructor(source: AsyncIterable<TSource>, signal: AbortSignal) {\n    this._source = source;\n    this._signal = signal;\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<TSource> {\n    // @ts-ignore\n    return this._source[Symbol.asyncIterator](this._signal);\n  }\n}\n\nexport type AsyncIterableInput<TSource> =\n  | AsyncIterable<TSource>\n  | AsyncIterator<TSource>\n  | Iterable<TSource | PromiseLike<TSource>>\n  | ArrayLike<TSource>\n  | PromiseLike<TSource>\n  | Observable<TSource>;\n\ntype WritableOrOperatorAsyncFunction<T, R> =\n  | NodeJS.WritableStream\n  | NodeJS.ReadWriteStream\n  | OperatorAsyncFunction<T, R>;\n\ndeclare module '../asynciterable/asynciterablex' {\n  interface AsyncIterableX<T> {\n    pipe(): AsyncIterableX<T>;\n    pipe<A>(op1: OperatorAsyncFunction<T, A>): AsyncIterableX<A>;\n    pipe<A, B>(\n      op1: OperatorAsyncFunction<T, A>,\n      op2: OperatorAsyncFunction<A, B>\n    ): AsyncIterableX<B>;\n    pipe<A, B, C>(\n      op1: OperatorAsyncFunction<T, A>,\n      op2: OperatorAsyncFunction<A, B>,\n      op3: OperatorAsyncFunction<B, C>\n    ): AsyncIterableX<C>;\n    pipe<A, B, C, D>(\n      op1: OperatorAsyncFunction<T, A>,\n      op2: OperatorAsyncFunction<A, B>,\n      op3: OperatorAsyncFunction<B, C>,\n      op4: OperatorAsyncFunction<C, D>\n    ): AsyncIterableX<D>;\n    pipe<A, B, C, D, E>(\n      op1: OperatorAsyncFunction<T, A>,\n      op2: OperatorAsyncFunction<A, B>,\n      op3: OperatorAsyncFunction<B, C>,\n      op4: OperatorAsyncFunction<C, D>,\n      op5: OperatorAsyncFunction<D, E>\n    ): AsyncIterableX<E>;\n    pipe<A, B, C, D, E, F>(\n      op1: OperatorAsyncFunction<T, A>,\n      op2: OperatorAsyncFunction<A, B>,\n      op3: OperatorAsyncFunction<B, C>,\n      op4: OperatorAsyncFunction<C, D>,\n      op5: OperatorAsyncFunction<D, E>,\n      op6: OperatorAsyncFunction<E, F>\n    ): AsyncIterableX<F>;\n    pipe<A, B, C, D, E, F, G>(\n      op1: OperatorAsyncFunction<T, A>,\n      op2: OperatorAsyncFunction<A, B>,\n      op3: OperatorAsyncFunction<B, C>,\n      op4: OperatorAsyncFunction<C, D>,\n      op5: OperatorAsyncFunction<D, E>,\n      op6: OperatorAsyncFunction<E, F>,\n      op7: OperatorAsyncFunction<F, G>\n    ): AsyncIterableX<G>;\n    pipe<A, B, C, D, E, F, G, H>(\n      op1: OperatorAsyncFunction<T, A>,\n      op2: OperatorAsyncFunction<A, B>,\n      op3: OperatorAsyncFunction<B, C>,\n      op4: OperatorAsyncFunction<C, D>,\n      op5: OperatorAsyncFunction<D, E>,\n      op6: OperatorAsyncFunction<E, F>,\n      op7: OperatorAsyncFunction<F, G>,\n      op8: OperatorAsyncFunction<G, H>\n    ): AsyncIterableX<H>;\n    pipe<A, B, C, D, E, F, G, H, I>(\n      op1: OperatorAsyncFunction<T, A>,\n      op2: OperatorAsyncFunction<A, B>,\n      op3: OperatorAsyncFunction<B, C>,\n      op4: OperatorAsyncFunction<C, D>,\n      op5: OperatorAsyncFunction<D, E>,\n      op6: OperatorAsyncFunction<E, F>,\n      op7: OperatorAsyncFunction<F, G>,\n      op8: OperatorAsyncFunction<G, H>,\n      op9: OperatorAsyncFunction<H, I>\n    ): AsyncIterableX<I>;\n    pipe(...operations: OperatorAsyncFunction<any, any>[]): AsyncIterableX<any>;\n    pipe<A extends NodeJS.WritableStream>(op1: A, options?: { end?: boolean }): A;\n  }\n}\n\ntry {\n  ((isBrowser) => {\n    if (isBrowser) {\n      return;\n    }\n\n    AsyncIterableX.prototype['pipe'] = nodePipe;\n    const readableOpts = (x: any, opts = x._writableState || { objectMode: true }) => opts;\n\n    function nodePipe<T>(this: AsyncIterableX<T>, ...args: any[]) {\n      let i = -1;\n      let end: boolean;\n      const n = args.length;\n      let prev: any = this;\n      let next: WritableOrOperatorAsyncFunction<T, any>;\n      while (++i < n) {\n        next = args[i];\n        if (typeof next === 'function') {\n          prev = next(AsyncIterableX.as(prev));\n        } else if (isWritableNodeStream(next)) {\n          ({ end = true } = args[i + 1] || {});\n          // prettier-ignore\n          return isReadableNodeStream(prev) ? prev.pipe(next, { end }) :\n            AsyncIterableX.as(prev).toNodeStream(readableOpts(next)).pipe(next, { end });\n        }\n      }\n      return prev;\n    }\n  })(typeof window === 'object' && typeof document === 'object' && document.nodeType === 9);\n} catch (e) {\n  /* */\n}\n"]}